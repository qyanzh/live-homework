// Code generated by Kitex v0.0.8. DO NOT EDIT.

package live

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
	"live/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return liveServiceInfo
}

var liveServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "Live"
	handlerType := (*api.Live)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddTxByID":             kitex.NewMethodInfo(addTxByIDHandler, newAddTxByIDArgs, newAddTxByIDResult, false),
		"DeleteTxByID":          kitex.NewMethodInfo(deleteTxByIDHandler, newDeleteTxByIDArgs, newDeleteTxByIDResult, false),
		"QueryTurnoverByRoomID": kitex.NewMethodInfo(queryTurnoverByRoomIDHandler, newQueryTurnoverByRoomIDArgs, newQueryTurnoverByRoomIDResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.0.8",
		Extra:           extra,
	}
	return svcInfo
}

func addTxByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.AddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.Live).AddTxByID(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddTxByIDArgs:
		success, err := handler.(api.Live).AddTxByID(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddTxByIDResult)
		realResult.Success = success
	}
	return nil
}
func newAddTxByIDArgs() interface{} {
	return &AddTxByIDArgs{}
}

func newAddTxByIDResult() interface{} {
	return &AddTxByIDResult{}
}

type AddTxByIDArgs struct {
	Req *api.AddReq
}

func (p *AddTxByIDArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddTxByIDArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddTxByIDArgs) Unmarshal(in []byte) error {
	msg := new(api.AddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddTxByIDArgs_Req_DEFAULT *api.AddReq

func (p *AddTxByIDArgs) GetReq() *api.AddReq {
	if !p.IsSetReq() {
		return AddTxByIDArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddTxByIDArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddTxByIDResult struct {
	Success *api.BaseResp
}

var AddTxByIDResult_Success_DEFAULT *api.BaseResp

func (p *AddTxByIDResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddTxByIDResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddTxByIDResult) Unmarshal(in []byte) error {
	msg := new(api.BaseResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddTxByIDResult) GetSuccess() *api.BaseResp {
	if !p.IsSetSuccess() {
		return AddTxByIDResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddTxByIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.BaseResp)
}

func (p *AddTxByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func deleteTxByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.Live).DeleteTxByID(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteTxByIDArgs:
		success, err := handler.(api.Live).DeleteTxByID(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteTxByIDResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteTxByIDArgs() interface{} {
	return &DeleteTxByIDArgs{}
}

func newDeleteTxByIDResult() interface{} {
	return &DeleteTxByIDResult{}
}

type DeleteTxByIDArgs struct {
	Req *api.DeleteReq
}

func (p *DeleteTxByIDArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteTxByIDArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteTxByIDArgs) Unmarshal(in []byte) error {
	msg := new(api.DeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteTxByIDArgs_Req_DEFAULT *api.DeleteReq

func (p *DeleteTxByIDArgs) GetReq() *api.DeleteReq {
	if !p.IsSetReq() {
		return DeleteTxByIDArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteTxByIDArgs) IsSetReq() bool {
	return p.Req != nil
}

type DeleteTxByIDResult struct {
	Success *api.BaseResp
}

var DeleteTxByIDResult_Success_DEFAULT *api.BaseResp

func (p *DeleteTxByIDResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteTxByIDResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteTxByIDResult) Unmarshal(in []byte) error {
	msg := new(api.BaseResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteTxByIDResult) GetSuccess() *api.BaseResp {
	if !p.IsSetSuccess() {
		return DeleteTxByIDResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteTxByIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.BaseResp)
}

func (p *DeleteTxByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func queryTurnoverByRoomIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.QueryTurnoverByRoomIDReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.Live).QueryTurnoverByRoomID(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *QueryTurnoverByRoomIDArgs:
		success, err := handler.(api.Live).QueryTurnoverByRoomID(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryTurnoverByRoomIDResult)
		realResult.Success = success
	}
	return nil
}
func newQueryTurnoverByRoomIDArgs() interface{} {
	return &QueryTurnoverByRoomIDArgs{}
}

func newQueryTurnoverByRoomIDResult() interface{} {
	return &QueryTurnoverByRoomIDResult{}
}

type QueryTurnoverByRoomIDArgs struct {
	Req *api.QueryTurnoverByRoomIDReq
}

func (p *QueryTurnoverByRoomIDArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryTurnoverByRoomIDArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryTurnoverByRoomIDArgs) Unmarshal(in []byte) error {
	msg := new(api.QueryTurnoverByRoomIDReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryTurnoverByRoomIDArgs_Req_DEFAULT *api.QueryTurnoverByRoomIDReq

func (p *QueryTurnoverByRoomIDArgs) GetReq() *api.QueryTurnoverByRoomIDReq {
	if !p.IsSetReq() {
		return QueryTurnoverByRoomIDArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryTurnoverByRoomIDArgs) IsSetReq() bool {
	return p.Req != nil
}

type QueryTurnoverByRoomIDResult struct {
	Success *api.QueryTurnoverByRoomIDResp
}

var QueryTurnoverByRoomIDResult_Success_DEFAULT *api.QueryTurnoverByRoomIDResp

func (p *QueryTurnoverByRoomIDResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryTurnoverByRoomIDResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryTurnoverByRoomIDResult) Unmarshal(in []byte) error {
	msg := new(api.QueryTurnoverByRoomIDResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryTurnoverByRoomIDResult) GetSuccess() *api.QueryTurnoverByRoomIDResp {
	if !p.IsSetSuccess() {
		return QueryTurnoverByRoomIDResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryTurnoverByRoomIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.QueryTurnoverByRoomIDResp)
}

func (p *QueryTurnoverByRoomIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddTxByID(ctx context.Context, Req *api.AddReq) (r *api.BaseResp, err error) {
	var _args AddTxByIDArgs
	_args.Req = Req
	var _result AddTxByIDResult
	if err = p.c.Call(ctx, "AddTxByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTxByID(ctx context.Context, Req *api.DeleteReq) (r *api.BaseResp, err error) {
	var _args DeleteTxByIDArgs
	_args.Req = Req
	var _result DeleteTxByIDResult
	if err = p.c.Call(ctx, "DeleteTxByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryTurnoverByRoomID(ctx context.Context, Req *api.QueryTurnoverByRoomIDReq) (r *api.QueryTurnoverByRoomIDResp, err error) {
	var _args QueryTurnoverByRoomIDArgs
	_args.Req = Req
	var _result QueryTurnoverByRoomIDResult
	if err = p.c.Call(ctx, "QueryTurnoverByRoomID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
